/*
 * Tesla Energy Service Engineering Data Engineer Evaluation
 *
 * API developed for take-home-assignment
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package handlers

import (
	"encoding/json"
	"net/http"

	"github.com/sarabrajsingh/restful-openapi/internal/logging"
	"github.com/sarabrajsingh/restful-openapi/internal/models"
	"github.com/sarabrajsingh/restful-openapi/internal/utils"
)

func DeleteErrors(log logging.Logger, deleteErrors func(logging.Logger)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		deleteErrors(log)

		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
	}
}

func GetErrors(log logging.Logger, getErrors func(logging.Logger) []string) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var response models.GetErrorsResponse

		l_errors := getErrors(log)

		response.Errors = l_errors

		responseJSON, err := json.Marshal(response)
		if err != nil {
			utils.WriteErrorResponse(w, "Failed to encode response to JSON", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		w.Write(responseJSON)
	}
}

func TempPost(log logging.Logger, addErrorFunc func(logging.Logger, string), bodyReader utils.BodyReaderFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload models.TempPostBody

		body, err := bodyReader(r.Body)
		if err != nil {
			utils.WriteErrorResponse(w, "Failed to parse request body", http.StatusBadRequest)
			return
		}

		defer r.Body.Close()

		if err := json.Unmarshal(body, &payload); err != nil {
			utils.WriteErrorResponse(w, "Failed to parse JSON", http.StatusBadRequest)
			return
		}

		// if we get a malformed data string, log the error to the server logs
		// add the data string to the global errors variable
		actual, err := utils.PayloadParserHelper(payload.Data)
		if err != nil {
			log.Println("POST /api/v1/temp - Malformed data string received. Error: ", err.Error())
			addErrorFunc(log, payload.Data)
			utils.WriteErrorResponse(w, "bad request", http.StatusBadRequest)
			return
		}

		var response models.TempPostResponse

		utils.TemperatureHelper(actual, &response)

		responseJSON, err := json.Marshal(response)
		if err != nil {
			utils.WriteErrorResponse(w, "Failed to encode response to JSON", http.StatusInternalServerError)
			return
		}

		// if we're at this point in the codebase then we can return a valid response with a 200 OK
		w.Header().Set("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(http.StatusOK)
		w.Write(responseJSON)
	}
}
